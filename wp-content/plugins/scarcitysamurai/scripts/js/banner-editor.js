// Generated by CoffeeScript 1.4.0

/*

LEGAL COPYRIGHT NOTICE

Copyright (c) Noble Samurai Pty Ltd, 2008-2013. All Rights Reserved.

This software is proprietary to and embodies the confidential technology of Noble Samurai Pty Ltd.
Possession, use, dissemination or copying of this software and media is authorised only pursuant
to a valid written license from Noble Samurai Pty Ltd. Questions or requests regarding permission may
be sent by email to legal@noblesamurai.com or by post to PO Box 477, Blackburn Victoria 3130, Australia.
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jQuery(function($) {
    var Banner, BannerElement, BannerElements, BannerStyle, BannerStyles, BaseView, CollectionView, Timer, TimerStyle, TimerStyles, banner;
    banner = window.ssam.banner;
    banner.editor = function(options) {
      var controller, view;
      if (options != null ? options.controller : void 0) {
        controller = options.controller;
      } else {
        controller = new banner.controller.Editor(options);
      }
      view = new banner.view.Editor({
        controller: controller
      });
      if (controller._ready) {
        view.open();
      } else {
        controller.on('ready', view.open, this);
      }
      return controller;
    };
    banner.controller.Editor = (function(_super) {

      __extends(Editor, _super);

      function Editor() {
        return Editor.__super__.constructor.apply(this, arguments);
      }

      Editor.prototype.initialize = function(options) {
        var _this = this;
        window.ssam.bindAll(this);
        if (options.page != null) {
          this.page = options.page;
        }
        this.banner = new banner.model.Banner;
        this.bannerStyles = new banner.model.BannerStyles;
        this.timerStyles = new banner.model.TimerStyles;
        return $.when(this.bannerStyles.fetch(), this.timerStyles.fetch()).then(this.banner.fetch(options)).done(function() {
          _this._ready = true;
          return _this.trigger('ready');
        }).fail(function(xhr, status, err) {
          if (xhr.readyState !== 0 && xhr.status !== 0) {
            return alert('Oops... Unable to load banner editor requirements.');
          }
        });
      };

      return Editor;

    })(Backbone.Model);
    banner.view.BaseView = BaseView = (function(_super) {

      __extends(BaseView, _super);

      function BaseView() {
        return BaseView.__super__.constructor.apply(this, arguments);
      }

      BaseView.prototype.initialize = function(options) {
        window.ssam.bindAll(this);
        this.options = options || {};
        if (options.controller != null) {
          return this.controller = options.controller;
        }
      };

      BaseView.prototype.render = function() {
        if (this.template != null) {
          $(this.el).html(this.template(this.data()));
        }
        return this;
      };

      BaseView.prototype.data = function() {
        return this.options;
      };

      BaseView.prototype.assign = function(selectors) {
        return _.each(selectors, function(view, selector) {
          return view.setElement($(selector, this.el)).render();
        }, this);
      };

      return BaseView;

    })(Backbone.View);
    banner.view.CollectionView = CollectionView = (function(_super) {

      __extends(CollectionView, _super);

      function CollectionView() {
        return CollectionView.__super__.constructor.apply(this, arguments);
      }

      CollectionView.prototype.viewOptions = {};

      CollectionView.prototype.initialize = function(options) {
        CollectionView.__super__.initialize.apply(this, arguments);
        this.views = [];
        if (options.view != null) {
          this.view = options.view;
        }
        if (options.viewOptions != null) {
          this.viewOptions = options.viewOptions;
        }
        if (this.model) {
          this.model.bind('reset', this.reset);
          this.model.bind('add', this.add);
          this.model.bind('remove', this.remove);
          return this.model.each(this.add);
        }
      };

      CollectionView.prototype.add = function(model) {
        var options, view;
        options = _.extend(this.viewOptions, {
          model: model,
          collection: this,
          controller: this.controller
        });
        view = new this.view(options);
        this.views.push(view);
        if (this._rendered) {
          return $(this.el).append(view.render().el);
        }
      };

      CollectionView.prototype.remove = function(model) {
        return this.views = _.filter(this.views, function(view) {
          if (this._rendered && view.model === model) {
            $(view.el, this.el).remove();
          }
          return view.model !== model;
        }, this);
      };

      CollectionView.prototype.reset = function() {
        var view, _i, _len, _ref;
        _ref = this.views;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          view = _ref[_i];
          $(view.el, this.el).remove();
        }
        this.views = [];
        this._rendered = false;
        return this.model.each(this.add);
      };

      CollectionView.prototype.show = function(view) {
        return true;
      };

      CollectionView.prototype.render = function() {
        this._rendered = true;
        $(this.el).empty();
        _.each(this.views, function(view) {
          if (this.show(view)) {
            return $(this.el).append(view.render().el);
          }
        }, this);
        return this;
      };

      return CollectionView;

    })(BaseView);
    banner.view.Editor = (function(_super) {

      __extends(Editor, _super);

      function Editor() {
        return Editor.__super__.constructor.apply(this, arguments);
      }

      Editor.prototype.template = banner.template('editor');

      Editor.prototype.initMaxImageWidth = 400;

      Editor.prototype.initMaxImageHeight = 60;

      Editor.prototype.events = {
        'click .ss-banner-modal-backdrop, .ss-banner-modal-close': 'closeHandler',
        'click .ss-banner-editor-menu > a': 'menuHandler',
        'click .ss-button-add-text': 'addTextHandler',
        'click .ss-button-add-image': 'addImageHandler',
        'click .ss-button-add-timer': 'addTimerHandler',
        'click .ss-button-delete': 'deleteHandler',
        'click .ss-button-save': 'saveHandler',
        'click .ss-button-save-as': 'saveAsHandler',
        'change .ss-banner-editor-option input, .ss-banner-editor-option select': 'optionChangeHandler',
        'keyup .ss-banner-editor-option input': 'throttledOptionChangeHandler'
      };

      Editor.prototype.initialize = function(options) {
        Editor.__super__.initialize.apply(this, arguments);
        this.bannerStylesView = new BannerStyles({
          model: this.controller.bannerStyles,
          controller: this.controller
        });
        this.timerStylesView = new TimerStyles({
          model: this.controller.timerStyles,
          controller: this.controller
        });
        this.bannerView = new Banner({
          editable: true,
          bannerClass: 'ss-banner-editor-style',
          model: this.controller.banner,
          controller: this.controller
        });
        this.controller.banner.on('change:style', this.updateBannerStyle);
        return this.controller.banner.elements.on('add remove change reset', this.updateElements);
      };

      Editor.prototype.render = function() {
        var inline;
        Editor.__super__.render.apply(this, arguments);
        $('.color-picker-hex', this.el).wpColorPicker({
          change: this.optionChangeHandler
        });
        inline = this.controller.banner.get('data.inline');
        $('.ss-banner-editor-layout iframe', this.el).attr('src', inline ? 'about:blank' : this.controller.page);
        $('.ss-banner-editor-menu-item-banner-dimensions', this.el).toggle(inline);
        this.updateElements();
        this.updateBannerStyle();
        this.assign({
          '.ss-banner-editor-layout .ss-banner-overlay': this.bannerView,
          '.ss-banner-editor-banner-styles': this.bannerStylesView,
          '.ss-banner-editor-timer-styles': this.timerStylesView
        });
        return this;
      };

      Editor.prototype.data = function() {
        var prefix, style;
        prefix = this.controller.banner.get('data.inline') ? 'inline_' : '';
        style = this.controller.bannerStyles.get(prefix + this.controller.banner.get('style.id'));
        if (!(style != null)) {
          style = new banner.model.BannerStyle;
        }
        return style.vars(this.controller.banner);
      };

      Editor.prototype.updateBannerStyle = function(banner, style) {
        var $el, customWidth, key, newStyle, value, _results;
        if (arguments.length === 0) {
          newStyle = this.controller.banner.toJSON().style;
        } else {
          newStyle = style;
        }
        _results = [];
        for (key in newStyle) {
          value = newStyle[key];
          $el = $("[name='" + key + "']", this.el);
          if (key === 'width') {
            customWidth = $el.val() === 'custom' || $el.find("option[value='" + value + "']").length === 0;
            if (customWidth) {
              $("[name='custom_width']", this.el).val(parseInt(value, 10) || '');
              value = 'custom';
            }
            $('.ss-banner-editor-banner-custom-width', this.el).toggle(customWidth);
          }
          $el.val(value);
          if ($el.is('.color-picker-hex')) {
            _results.push($el.wpColorPicker('color', value));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      Editor.prototype.updateElements = function() {
        var hasTimer;
        hasTimer = this.controller.banner.elements.some(function(element) {
          return element.get('type') === 'timer';
        });
        return $('.ss-button-add-timer', this.el).attr('disabled', hasTimer);
      };

      Editor.prototype.open = function() {
        this.render();
        return $(this.el).appendTo(document.body);
      };

      Editor.prototype.close = function() {
        return $(this.el).detach();
      };

      Editor.prototype.closeHandler = function(event) {
        event.preventDefault();
        return this.close();
      };

      Editor.prototype.menuHandler = function(event) {
        var $frame, $target, content;
        event.preventDefault();
        $target = $(event.target);
        $target.addClass('active');
        $('.ss-banner-editor-menu > a', this.el).not($target).removeClass('active');
        content = $target.attr('data-content');
        $frame = $(".ss-banner-editor-" + content + "-frame", this.el).show();
        return $('.ss-banner-editor-content-frame', this.el).not($frame).hide();
      };

      Editor.prototype.addTextHandler = function(event) {
        event.preventDefault();
        return this.controller.banner.elements.add({
          type: "text",
          data: {
            text: "Text"
          }
        });
      };

      Editor.prototype.addImageHandler = function(event) {
        var _this = this;
        event.preventDefault();
        if (!this.mediaFileFrame) {
          this.mediaLibrary = wp.media.query({
            type: 'ss_banner_images'
          });
          this.mediaFileFrame = wp.media.frames.ss_banner_file_frame = wp.media({
            title: 'Add Banner Image',
            button: {
              text: 'Insert Image'
            },
            multiple: false,
            library: {
              type: 'image'
            }
          });
          this.mediaFileFrame.on('select', function() {
            var imageData, sizeAdjust;
            imageData = _this.mediaFileFrame.state().get('selection').first().toJSON();
            sizeAdjust = Math.min(1, _this.initMaxImageWidth / imageData.width, _this.initMaxImageHeight / imageData.height);
            return _this.controller.banner.elements.add({
              type: "image",
              data: {
                src: imageData.url,
                width: imageData.width * sizeAdjust,
                height: imageData.height * sizeAdjust
              }
            });
          });
          this.mediaFileFrame.on('close', function() {
            return $(_this.el).show();
          });
        }
        this.mediaFileFrame.open();
        return $(this.el).hide();
      };

      Editor.prototype.addTimerHandler = function(event) {
        event.preventDefault();
        if (!($(event.target).attr('disabled') != null)) {
          return this.controller.banner.elements.add({
            type: "timer"
          });
        }
      };

      Editor.prototype.deleteHandler = function(event) {
        event.preventDefault();
        if (confirm('Are you sure you want to delete this banner?')) {
          this.controller.banner.destroy({
            wait: true
          });
          return this.close();
        }
      };

      Editor.prototype.saveHandler = function(event) {
        event.preventDefault();
        if (this.controller.banner.id != null) {
          if (confirm('This will update all instances of this banner.  Are you sure?')) {
            this.controller.banner.save();
            return this.close();
          }
        } else {
          return this.saveAsHandler(event);
        }
      };

      Editor.prototype.saveAsHandler = function(event, message) {
        var name,
          _this = this;
        event.preventDefault();
        if (message != null) {
          message = "ERROR: " + message + "\n\n";
        } else {
          message = '';
        }
        name = prompt("" + message + "What name should be given to this banner?");
        if (name === null) {
          return;
        }
        if (name === '') {
          return this.saveAsHandler(event, 'Banner name cannot be empty.');
        } else {
          this.controller.banner.unset('id', {
            silent: true
          });
          this.controller.banner.set('name', name, {
            silent: true
          });
          return $.when(this.controller.banner.save()).fail(function(error) {
            return _this.saveAsHandler(event, error);
          }).done(function() {
            return _this.close();
          });
        }
      };

      Editor.prototype.optionChangeHandler = function(event) {
        var name, value;
        name = event.target.name;
        value = event.target.value;
        if (event.type === 'irischange') {
          value = $(event.target).wpColorPicker('color');
        } else if (name === 'custom_width') {
          name = 'width';
          value = value ? "" + (value || 0) + "px" : 'auto';
        } else if (name === 'width' && value === 'custom') {
          value = $('input[name="custom_width"]', this.el).val();
          value = value ? "" + (value || 0) + "px" : 'auto';
        }
        return this.controller.banner.set("style." + name, value);
      };

      Editor.prototype.throttledOptionChangeHandler = function(event) {
        var _ref;
        if ((_ref = this._throttledOptionChangeHandler) == null) {
          this._throttledOptionChangeHandler = _.debounce(this.optionChangeHandler, 500);
        }
        return this._throttledOptionChangeHandler(event);
      };

      return Editor;

    })(BaseView);
    banner.view.Banner = Banner = (function(_super) {

      __extends(Banner, _super);

      function Banner() {
        return Banner.__super__.constructor.apply(this, arguments);
      }

      Banner.prototype.template = banner.template('editor-banner');

      Banner.prototype.initialize = function(options) {
        Banner.__super__.initialize.apply(this, arguments);
        this.inline = options != null ? options.inline : void 0;
        this.elementsView = new BannerElements({
          editable: options != null ? options.editable : void 0,
          model: this.model.elements,
          controller: this.controller
        });
        this.model.on('change:style.id', this.updateBannerStyle);
        return this.model.on('change:style', this.updateBanner);
      };

      Banner.prototype.render = function() {
        Banner.__super__.render.apply(this, arguments);
        this.renderBanner();
        this.renderBannerCSS();
        return this;
      };

      Banner.prototype.getBannerStyle = function() {
        var prefix;
        prefix = this.controller.banner.get('data.inline') ? 'inline_' : '';
        return this.controller.bannerStyles.get(prefix + this.model.get('style.id')) || new banner.model.BannerStyle;
      };

      Banner.prototype.renderBanner = function() {
        var compiled;
        compiled = _.template(this.getBannerStyle().get('html'), null, banner.templateOptions);
        $("." + this.options.bannerClass, this.el).addClass('ss-banner-preview-container').html(compiled());
        return this.assign({
          '.ss-banner-content': this.elementsView
        });
      };

      Banner.prototype.renderBannerCSS = function() {
        var css, style, vars;
        style = this.getBannerStyle();
        css = style.css(this.model, "." + this.options.bannerClass + " ");
        $('style.ss-banner-css', this.el).remove();
        $(this.el).append($('<style class="ss-banner-css" />').text(css));
        $(this.el).toggleClass('ss-banner-width-max', this.controller.banner.get('style.width') === 'max');
        vars = style.vars(this.model);
        return $(this.el).toggleClass('ss-banner-background-dark', banner.brightness(vars['BACKGROUND_COLOR']) > 130);
      };

      Banner.prototype.updateBanner = function() {
        return this.renderBannerCSS();
      };

      Banner.prototype.updateBannerStyle = function() {
        return this.renderBanner();
      };

      return Banner;

    })(BaseView);
    banner.view.Timer = Timer = (function(_super) {

      __extends(Timer, _super);

      function Timer() {
        return Timer.__super__.constructor.apply(this, arguments);
      }

      Timer.prototype.template = banner.template('editor-timer');

      Timer.prototype.initialize = function(options) {
        Timer.__super__.initialize.apply(this, arguments);
        return this.timerStyleId = options.timerStyleId;
      };

      Timer.prototype.render = function() {
        Timer.__super__.render.apply(this, arguments);
        this.renderTimer();
        this.renderTimerCSS();
        return this;
      };

      Timer.prototype.renderTimer = function() {
        var style;
        style = this.controller.timerStyles.get(this.timerStyleId);
        if (!(style != null)) {
          style = new banner.model.TimerStyle;
        }
        $("." + this.options.timerClass, this.el).html(style.get('html'));
        $('.ss-timer-value', this.el).text('00');
        return this;
      };

      Timer.prototype.renderTimerCSS = function() {
        var bannerStyle, css, prefix, style;
        style = this.controller.timerStyles.get(this.timerStyleId);
        if (!(style != null)) {
          style = new banner.model.TimerStyle;
        }
        prefix = this.controller.banner.get('data.inline') ? 'inline_' : '';
        bannerStyle = this.controller.bannerStyles.get(prefix + this.controller.banner.get('style.id'));
        if (!(bannerStyle != null)) {
          bannerStyle = new banner.model.BannerStyle;
        }
        css = style.css(this.controller.banner, bannerStyle, "." + this.options.timerClass + " ");
        $('style.ss-banner-css', this.el).remove();
        return $(this.el).append($('<style class="ss-timer-css" />').text(css));
      };

      return Timer;

    })(BaseView);
    banner.view.BannerElement = BannerElement = (function(_super) {

      __extends(BannerElement, _super);

      function BannerElement() {
        return BannerElement.__super__.constructor.apply(this, arguments);
      }

      BannerElement.prototype.tagName = 'div';

      BannerElement.prototype.className = 'ss-banner-element-wrapper';

      BannerElement.prototype.template = banner.template('editor-banner-element');

      BannerElement.prototype.events = {
        'click .drag .remove': 'removeHandler'
      };

      BannerElement.prototype.initialize = function(options) {
        var bannerId;
        BannerElement.__super__.initialize.apply(this, arguments);
        this.elements = options.collection;
        if (options != null ? options.editable : void 0) {
          this.template = banner.template('editor-banner-editable-element');
        }
        this.addEditor = _.throttle(this._addEditor, 1000);
        switch (this.model.get('type')) {
          case 'timer':
            bannerId = this.controller.banner.id;
            this.timerView = new Timer({
              controller: this.controller,
              timerStyleId: this.controller.banner.get('style.timer_id'),
              timerClass: "ss-banner-" + bannerId + "-timer-style"
            });
        }
        this.controller.banner.on('change', this.updateElement);
        if (!(options != null ? options.editable : void 0)) {
          return this.model.on('change', this.updateElement);
        }
      };

      BannerElement.prototype.render = function() {
        var $image, data, _ref, _ref1, _ref2,
          _this = this;
        BannerElement.__super__.render.apply(this, arguments);
        switch (this.model.get('type')) {
          case 'text':
            data = (_ref = this.model.get('data.text')) != null ? _ref.replace(/\\"/g, '"') : void 0;
            $('.ss-banner-element', this.el).html(data).attr('id', "ss-banner-element-" + this.cid);
            if ((_ref1 = this.options) != null ? _ref1.editable : void 0) {
              _.defer(this.addEditor);
            }
            break;
          case 'image':
            $image = $('<img>').attr({
              src: this.model.get('data.src')
            });
            if (this.model.has('data.width')) {
              $image.width(this.model.get('data.width'));
            }
            if (this.model.has('data.height')) {
              $image.height(this.model.get('data.height'));
            }
            $image.css({
              margin: '0 auto'
            });
            $('.ss-banner-element', this.el).empty().append($image);
            if ((_ref2 = this.options) != null ? _ref2.editable : void 0) {
              $image.on('load', function() {
                return _.defer(_this._resizableImage);
              });
            }
            break;
          case 'timer':
            this.timerView.timerStyleId = this.controller.banner.get('style.timer_id');
            this.assign({
              '.ss-banner-element': this.timerView
            });
        }
        $('.drag .remove', this.el).on('click', this.removeHandler);
        return this;
      };

      BannerElement.prototype._resizableImage = function() {
        var _this = this;
        return $('img', this.el).resizable({
          handles: 'ne, se, sw, nw',
          aspectRatio: true,
          resize: function(event, ui) {
            return $(ui.element).css({
              top: 0,
              left: 0
            });
          },
          stop: function(event, ui) {
            _this.model.set('data.width', ui.size.width);
            return _this.model.set('data.height', ui.size.height);
          }
        });
      };

      BannerElement.prototype._addEditor = function() {
        this._removeEditor();
        return tinyMCE.init({
          mode: 'exact',
          elements: "ss-banner-element-" + this.cid,
          theme: 'modern',
          plugins: 'textcolor',
          inline: true,
          fixed_toolbar_container: '.ss-banner-editor-mce-toolbar',
          toolbar: 'fontselect forecolor bold italic underline strikethrough',
          menubar: false,
          language: ssBannerEditor.language,
          relative_urls: false,
          convert_urls: false,
          fix_list_elements: true,
          paste_remove_styles: true,
          paste_remove_spans: true,
          paste_strip_class_attributes: 'all',
          paste_text_use_dialog: true,
          force_hex_style_colors: true,
          force_br_newlines: true,
          force_p_newlines: false,
          forced_root_block: '',
          init_instance_callback: this._initEditor
        });
      };

      BannerElement.prototype._updateModel = function(ed) {
        return this.model.set('data.text', ed.save());
      };

      BannerElement.prototype._initEditor = function(ed) {
        var key, style, value,
          _this = this;
        console.log('init editor');
        style = window.getComputedStyle($("#" + ed.id, this.el).get(0));
        for (key in style) {
          value = style[key];
          if (key.match(/^color|font|line-height/)) {
            $(ed.bodyElement).css(key, value);
          }
        }
        ed.bodyElement.style.padding = 0;
        ed.bodyElement.style.margin = 0;
        ed.bodyElement.style.backgroundColor = 'transparent';
        ed.bodyElement.style.overflow = 'hidden';
        ed.bodyElement.style.whiteSpace = 'nowrap';
        ed.on('keyup', function() {
          return _this._updateModel(ed);
        });
        ed.on('event', function() {
          return _this._updateModel(ed);
        });
        ed.on('execCommand', function() {
          return _this._updateModel(ed);
        });
        ed.on('activate', function() {
          return _this._updateModel(ed);
        });
        return this._updateModel(ed);
      };

      BannerElement.prototype._removeEditor = function() {
        var eid;
        eid = "ss-banner-element-" + this.cid;
        if (tinyMCE.get(eid) != null) {
          tinyMCE.execCommand('mceFocus', false, eid);
        }
        return tinyMCE.execCommand('mceRemoveControl', false, eid);
      };

      BannerElement.prototype.updateElement = function() {
        return this.render();
      };

      BannerElement.prototype.removeHandler = function(event) {
        event.preventDefault();
        this._removeEditor();
        return this.controller.banner.elements.remove(this.model);
      };

      return BannerElement;

    })(BaseView);
    banner.view.BannerElements = BannerElements = (function(_super) {

      __extends(BannerElements, _super);

      function BannerElements() {
        return BannerElements.__super__.constructor.apply(this, arguments);
      }

      BannerElements.prototype.view = BannerElement;

      BannerElements.prototype.initialize = function(options) {
        options.viewOptions = _.extend(options.viewOptions || {}, {
          editable: options != null ? options.editable : void 0
        });
        BannerElements.__super__.initialize.call(this, options);
        return this.model.on('add remove reset', this.updateElements);
      };

      BannerElements.prototype.render = function() {
        var _ref,
          _this = this;
        BannerElements.__super__.render.apply(this, arguments);
        if (!((_ref = this.options) != null ? _ref.editable : void 0)) {
          return;
        }
        return $(this.el).sortable({
          handle: '.drag',
          placeholder: 'ss-banner-element-placeholder',
          tolerance: 'pointer',
          axis: 'x',
          containment: false,
          start: function(ev, ob) {
            var top;
            _this._from = ob.item.index();
            top = ob.placeholder.offset().top - ob.item.offset().top;
            ob.item.css('top', ob.originalPosition.top);
            ob.placeholder.width(ob.item.width());
            ob.placeholder.height(ob.item.height());
            return ob.placeholder.attr('class', ob.item.attr('class')).addClass('ss-banner-element-placeholder');
          },
          stop: function(ev, ob) {
            var element, elements, i, to, _i, _j, _ref1, _ref2, _ref3, _results;
            to = ob.item.index();
            elements = [];
            for (i = _i = _ref1 = _this._from; _ref1 <= to ? _i <= to : _i >= to; i = _ref1 <= to ? ++_i : --_i) {
              elements.push(_this.model.at(i));
            }
            elements.push(elements.shift());
            _ref3 = _.object((function() {
              _results = [];
              for (var _j = _ref2 = _this._from; _ref2 <= to ? _j <= to : _j >= to; _ref2 <= to ? _j++ : _j--){ _results.push(_j); }
              return _results;
            }).apply(this), elements);
            for (i in _ref3) {
              element = _ref3[i];
              element.set('position', parseInt(i, 10));
            }
            _this.model.sort();
            return _this.trigger('dragged');
          }
        });
      };

      BannerElements.prototype.updateElements = function() {
        this.model.each(function(element, i) {
          return element.set('position', i);
        });
        this.model.sort();
        return this.render();
      };

      return BannerElements;

    })(CollectionView);
    banner.view.BannerStyle = BannerStyle = (function(_super) {

      __extends(BannerStyle, _super);

      function BannerStyle() {
        return BannerStyle.__super__.constructor.apply(this, arguments);
      }

      BannerStyle.prototype.tagName = 'li';

      BannerStyle.prototype.className = 'ss-banner-editor-banner-style';

      BannerStyle.prototype.template = banner.template('editor-banner-style');

      BannerStyle.prototype.events = {
        'click .ss-banner-overlay': 'clickHandler'
      };

      BannerStyle.prototype.initialize = function(options) {
        BannerStyle.__super__.initialize.apply(this, arguments);
        this.controller.banner.on('change:style', this.updateBannerStyle);
        this.controller.banner.elements.on('add remove change reset', this.updateBannerElements);
        this.banner = new banner.model.Banner(this.controller.banner.toJSON());
        this.banner.set('style.id', this.model.get('id'));
        return this.bannerView = new Banner({
          editable: false,
          bannerClass: "ss-banner-style-" + this.model.id,
          model: this.banner,
          controller: this.controller
        });
      };

      BannerStyle.prototype.render = function() {
        var inline, selected, _ref;
        BannerStyle.__super__.render.apply(this, arguments);
        inline = this.controller.banner.get('data.inline') === true;
        $('.preview-content iframe', this.el).attr('src', inline ? 'about:blank' : this.controller.page);
        selected = this.model.get('id').toString() === ((_ref = this.controller.banner.get('style.id')) != null ? _ref.toString() : void 0);
        $(this.el).toggleClass('selected', selected);
        this.assign({
          '.ss-banner-overlay': this.bannerView
        });
        return this;
      };

      BannerStyle.prototype.clickHandler = function(event) {
        event.preventDefault();
        return this.controller.banner.set('style.id', this.model.get('id'));
      };

      BannerStyle.prototype.updateBannerStyle = function(banner, style) {
        var key, selected, value, _ref, _results;
        selected = this.model.id.toString() === ((_ref = this.controller.banner.get('style.id')) != null ? _ref.toString() : void 0);
        $(this.el).toggleClass('selected', selected);
        _results = [];
        for (key in style) {
          value = style[key];
          if (key !== 'id') {
            _results.push(this.banner.set("style." + key, value));
          }
        }
        return _results;
      };

      BannerStyle.prototype.updateBannerElements = function() {
        return this.banner.elements.reset(this.controller.banner.elements.toJSON());
      };

      return BannerStyle;

    })(BaseView);
    banner.view.BannerStyles = BannerStyles = (function(_super) {

      __extends(BannerStyles, _super);

      function BannerStyles() {
        return BannerStyles.__super__.constructor.apply(this, arguments);
      }

      BannerStyles.prototype.view = BannerStyle;

      BannerStyles.prototype.show = function(view) {
        return (view.controller.banner.get('data.inline') || false) === (view.model.get('inline') || false);
      };

      return BannerStyles;

    })(CollectionView);
    banner.view.TimerStyle = TimerStyle = (function(_super) {

      __extends(TimerStyle, _super);

      function TimerStyle() {
        return TimerStyle.__super__.constructor.apply(this, arguments);
      }

      TimerStyle.prototype.tagName = 'li';

      TimerStyle.prototype.className = 'ss-banner-editor-timer-style';

      TimerStyle.prototype.template = banner.template('editor-timer-style');

      TimerStyle.prototype.events = {
        'click .preview': 'clickHandler'
      };

      TimerStyle.prototype.initialize = function() {
        TimerStyle.__super__.initialize.apply(this, arguments);
        this.timerView = new Timer({
          controller: this.controller,
          timerStyleId: this.model.id,
          timerClass: "ss-timer-style-" + this.model.id
        });
        return this.controller.banner.on('change:style', this.updateBanner);
      };

      TimerStyle.prototype.render = function() {
        var selected, _ref;
        TimerStyle.__super__.render.apply(this, arguments);
        selected = this.model.id.toString() === ((_ref = this.controller.banner.get('style.timer_id')) != null ? _ref.toString() : void 0);
        $(this.el).toggleClass('selected', selected);
        this.assign({
          '.preview-alignment': this.timerView
        });
        return this;
      };

      TimerStyle.prototype.clickHandler = function(event) {
        event.preventDefault();
        return this.controller.banner.set('style.timer_id', this.model.id);
      };

      TimerStyle.prototype.updateBanner = function() {
        var attributes, prefix, selected, style, vars, _ref;
        attributes = this.controller.banner.changedAttributes();
        if (attributes['style.timer_id'] != null) {
          selected = this.model.id.toString() === ((_ref = this.controller.banner.get('style.timer_id')) != null ? _ref.toString() : void 0);
          $(this.el).toggleClass('selected', selected);
        }
        this.render();
        prefix = this.controller.banner.get('data.inline') ? 'inline_' : '';
        style = this.controller.bannerStyles.get(prefix + this.controller.banner.get('style.id'));
        if (!(style != null)) {
          style = new banner.model.TimerStyle;
        }
        vars = style.vars(this.controller.banner);
        return $(this.el).css('background-color', vars['BACKGROUND_COLOR'] || 'inherit');
      };

      return TimerStyle;

    })(BaseView);
    return banner.view.TimerStyles = TimerStyles = (function(_super) {

      __extends(TimerStyles, _super);

      function TimerStyles() {
        return TimerStyles.__super__.constructor.apply(this, arguments);
      }

      TimerStyles.prototype.view = TimerStyle;

      return TimerStyles;

    })(CollectionView);
  });

}).call(this);
