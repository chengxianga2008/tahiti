// Generated by CoffeeScript 1.4.0

/*

LEGAL COPYRIGHT NOTICE

Copyright (c) Noble Samurai Pty Ltd, 2008-2013. All Rights Reserved.

This software is proprietary to and embodies the confidential technology of Noble Samurai Pty Ltd.
Possession, use, dissemination or copying of this software and media is authorised only pursuant
to a valid written license from Noble Samurai Pty Ltd. Questions or requests regarding permission may
be sent by email to legal@noblesamurai.com or by post to PO Box 477, Blackburn Victoria 3130, Australia.
*/


(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  jQuery(function($) {
    var ScarcitySamuraiAutoResponders;
    ScarcitySamuraiAutoResponders = (function() {

      ScarcitySamuraiAutoResponders.autoResponders = {
        aweber: {
          action_regex: /aweber\.com/,
          token_field_name: 'custom token',
          token_field_wrapper_level: null
        },
        emailsamurai: {
          action_regex: /lists\.noblesamurai\.com/,
          token_field_name: 'custom token',
          token_field_wrapper_level: null
        },
        getresponse: {
          action_regex: /\.getresponse\.com/,
          token_field_name: '[name=custom_token]',
          token_field_wrapper_level: 2
        },
        infusionsoft: {
          action_regex: /infusionsoft\.com/,
          token_field_name: '[name^=inf_custom_token]',
          token_field_wrapper_level: 0
        },
        mailchimp: {
          action_regex: /\.list-manage.*\.com/,
          token_field_name: 'TOKEN',
          token_field_wrapper_level: null
        },
        sendpepper: {
          action_regex: /moon-ray\.com/,
          token_field_name: '[name^=token]',
          token_field_wrapper_level: 1
        }
      };

      function ScarcitySamuraiAutoResponders(settings) {
        this.onFormSubmit = __bind(this.onFormSubmit, this);
        this.autoResponder = settings.auto_responder;
        this.autoResponderSettings = ScarcitySamuraiAutoResponders.autoResponders[this.autoResponder];
        this.optimizePress2 = settings.optimizepress2;
        this.nonce = settings.nonce;
        this.pageId = settings.page_id;
        this.token = settings.token;
        this.$forms = this.detectForms();
        this.doAutoResponderSpecificChanges();
        this.doGenericChanges();
      }

      ScarcitySamuraiAutoResponders.prototype.detectForms = function() {
        var forms,
          _this = this;
        forms = [];
        $('form').each(function(index, form) {
          if (_this.autoResponderSettings.action_regex.test(form.action)) {
            return forms.push($(form));
          }
        });
        return forms;
      };

      ScarcitySamuraiAutoResponders.prototype.doAutoResponderSpecificChanges = function() {
        var $form, _i, _len, _ref, _results;
        _ref = this.$forms;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          $form = _ref[_i];
          switch (this.autoResponder) {
            case 'aweber':
              _results.push($form.find('[name=meta_forward_vars]').remove());
              break;
            default:
              _results.push(void 0);
          }
        }
        return _results;
      };

      ScarcitySamuraiAutoResponders.prototype.doGenericChanges = function() {
        var $emailField, $emailFieldVal, $form, $tokenField, _i, _len, _ref, _results;
        _ref = this.$forms;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          $form = _ref[_i];
          $emailFieldVal = this.findFormElement($form, ['email_field']);
          if ($emailFieldVal != null) {
            $emailField = this.findFormElement($form, [$emailFieldVal.val()]);
          } else {
            $emailField = this.findFormElement($form, ['email', 'from']);
          }
          if ($emailField === null) {
            console.error("[Scarcity Samurai] Couldn't find the email field in '" + this.autoResponder + "' form");
            continue;
          }
          $form.data('email_field', $emailField);
          $tokenField = $form.find(this.autoResponderSettings.token_field_name);
          if ($tokenField.length === 0) {
            $tokenField = $("<input type='hidden' name='" + this.autoResponderSettings.token_field_name + "' value='" + this.token + "' />");
            $form.prepend($tokenField);
          } else {
            $tokenField.val(this.token);
          }
          if (this.optimizePress2 || $form.find('.sidebar-boxes').length > 0) {
            $tokenField.hide();
          } else if (this.autoResponderSettings.token_field_wrapper_level > 0) {
            $tokenField.parents().eq(this.autoResponderSettings.token_field_wrapper_level - 1).hide();
          } else {
            $tokenField.hide();
          }
          _results.push($form.submit(this.onFormSubmit));
        }
        return _results;
      };

      ScarcitySamuraiAutoResponders.prototype.findFormElement = function($form, fieldNames) {
        var $field, fieldName, regex, _i, _j, _len, _len1;
        if (_.isString(fieldNames)) {
          fieldNames = [fieldNames];
        }
        for (_i = 0, _len = fieldNames.length; _i < _len; _i++) {
          fieldName = fieldNames[_i];
          $field = $form.find('[name]').filter(function() {
            return fieldName === this.name;
          });
          if ($field.length > 0) {
            return $field.eq(0);
          }
        }
        for (_j = 0, _len1 = fieldNames.length; _j < _len1; _j++) {
          fieldName = fieldNames[_j];
          regex = RegExp(fieldName, 'i');
          $field = $form.find('[name]').filter(function() {
            return regex.test(this.name);
          });
          if ($field.length > 0) {
            return $field.eq(0);
          }
        }
        return null;
      };

      ScarcitySamuraiAutoResponders.prototype.onFormSubmit = function(event) {
        var formDOMElement;
        event.preventDefault();
        formDOMElement = event.currentTarget;
        return $.post(ajaxurl, {
          action: 'ss_subscribe_user',
          nonce: this.nonce,
          page_id: this.pageId,
          email: $(formDOMElement).data('email_field').val(),
          token: this.token
        }, function(response) {
          if (response.success === true) {
            $(formDOMElement).off('submit');
            return HTMLFormElement.prototype.submit.apply(formDOMElement);
          } else {
            return alert(response.data);
          }
        });
      };

      return ScarcitySamuraiAutoResponders;

    })();
    return $(window).load(function() {
      return new ScarcitySamuraiAutoResponders(scarcitySamuraiAutoRespondersData);
    });
  });

}).call(this);
