// Generated by CoffeeScript 1.4.0

/*

LEGAL COPYRIGHT NOTICE

Copyright (c) Noble Samurai Pty Ltd, 2008-2013. All Rights Reserved.

This software is proprietary to and embodies the confidential technology of Noble Samurai Pty Ltd.
Possession, use, dissemination or copying of this software and media is authorised only pursuant
to a valid written license from Noble Samurai Pty Ltd. Questions or requests regarding permission may
be sent by email to legal@noblesamurai.com or by post to PO Box 477, Blackburn Victoria 3130, Australia.
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jQuery(function($) {
    var Banner, BannerElement, BannerElements, BannerStyle, BannerStyles, Banners, StyleModel, TimerStyle, TimerStyles, banner, _ref;
    window.ssam = (_ref = window.ssam) != null ? _ref : {};
    banner = window.ssam.banner = {
      model: {},
      view: {},
      controller: {},
      templateOptions: {
        evaluate: /<#([\s\S]+?)#>/g,
        interpolate: /\{\{\{([\s\S]+?)\}\}\}/g,
        escape: /\{\{([^\}]+?)\}\}(?!\})/g
      },
      template: _.memoize(function(id) {
        var compiled,
          _this = this;
        compiled = null;
        return function(data) {
          if (compiled == null) {
            compiled = _.template($('#tmpl-ss-banner-' + id).html(), null, _this.templateOptions);
          }
          return compiled(data);
        };
      }),
      ajax: function(action, options) {
        if (options == null) {
          options = {};
        }
        options = _.defaults(options, {
          type: 'POST',
          url: ajaxurl,
          context: this
        });
        options.data = {
          action: action,
          params: JSON.stringify(options.data)
        };
        return $.Deferred(function(deferred) {
          if (options.success) {
            deferred.done(options.success);
          }
          if (options.error) {
            deferred.fail(options.error);
          }
          delete options.success;
          delete options.error;
          return $.ajax(options).done(function(response) {
            if (response === '1' || response === 1) {
              response = {
                success: true
              };
            }
            if (_.isObject(response) && !_.isUndefined(response.success)) {
              return deferred[response.success ? 'resolveWith' : 'rejectWith'](this, [response.data]);
            } else {
              return deferred.rejectWith(this, [response]);
            }
          }).fail(function() {
            return deferred.rejectWith(this, arguments);
          });
        }).promise();
      },
      brightness: function(color) {
        var rgb;
        rgb = color.match(/#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/i);
        if (rgb == null) {
          return 0;
        }
        return Math.sqrt(Math.pow(parseInt(rgb[1], 16), 2) * 0.299 + Math.pow(parseInt(rgb[2], 16), 2) * 0.587 + Math.pow(parseInt(rgb[3], 16), 2) * 0.114);
      },
      lighten: function(color, percent) {
        var rgb;
        rgb = color.match(/#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/i);
        if (rgb == null) {
          return color;
        }
        return '#' + _.reduce(_.rest(rgb), function(newc, c) {
          var cpart;
          cpart = Math.min(255, Math.round(parseInt(c, 16) + (percent * 255 / 100))).toString(16);
          if (cpart.length === 1) {
            cpart = "0" + cpart;
          }
          return newc + cpart;
        }, '');
      },
      darken: function(color, percent) {
        var rgb;
        rgb = color.match(/#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/i);
        if (rgb == null) {
          return color;
        }
        return '#' + _.reduce(_.rest(rgb), function(newc, c) {
          var cpart;
          cpart = Math.max(0, Math.round(parseInt(c, 16) - (percent * 255 / 100))).toString(16);
          if (cpart.length === 1) {
            cpart = "0" + cpart;
          }
          return newc + cpart;
        }, '');
      },
      replace: function(val, options) {
        var args, func;
        if (!_.isArray(val)) {
          return val;
        }
        func = val[0];
        args = _.map(val.slice(1), function(arg) {
          if (_.has(options, arg)) {
            return banner.replace(options[arg], options);
          } else {
            return arg;
          }
        });
        if (func === 'variable_replace') {
          return args[0];
        } else if ($.isFunction(banner[func])) {
          return banner[func].apply(this, args);
        }
      }
    };
    banner.model.Banner = Banner = (function(_super) {

      __extends(Banner, _super);

      function Banner() {
        return Banner.__super__.constructor.apply(this, arguments);
      }

      Banner.prototype.defaults = {
        style: {
          id: '1',
          timer_id: '1'
        }
      };

      Banner.prototype.initialize = function(options) {
        window.ssam.bindAll(this);
        if ((options != null ? options.elements : void 0) != null) {
          return this.elements = new BannerElements(options.elements);
        } else {
          return this.elements = new BannerElements;
        }
      };

      Banner.prototype.sync = function(method, model, options) {
        var data;
        switch (method) {
          case 'create':
          case 'update':
            data = this.toJSON();
            data.elements = this.elements.toJSON();
            return banner.ajax('ss_banner_save', {
              data: data,
              context: this,
              success: function(response) {
                this.set(response);
                if (response.id != null) {
                  data.id = response.id;
                }
                return this.trigger("" + method + "d", data);
              }
            });
          case 'read':
            if (options.id) {
              data = {
                id: options.id
              };
              return banner.ajax('ss_banner_read', {
                data: data,
                context: this,
                success: function(response) {
                  this.elements.reset(response.elements);
                  this.set('id', options.id);
                  this.set(response);
                  if (!this.has('style.timer_id')) {
                    return this.set('style.timer_id', '1');
                  }
                }
              });
            }
            break;
          case 'delete':
            data = {
              id: model.id
            };
            return banner.ajax('ss_banner_delete', {
              data: data,
              context: this,
              error: function(message) {
                return alert(message);
              },
              success: function() {
                return this.trigger('deleted', data);
              }
            });
        }
      };

      return Banner;

    })(Backbone.NestedModel);
    banner.model.Banners = Banners = (function(_super) {

      __extends(Banners, _super);

      function Banners() {
        return Banners.__super__.constructor.apply(this, arguments);
      }

      Banners.prototype.model = Banner;

      Banners.prototype.sync = function(method, collection, options) {
        if (method === 'read') {
          return banner.ajax('ss_banners_read', {
            context: this,
            success: function(response) {
              return this.add(response);
            }
          });
        }
      };

      return Banners;

    })(Backbone.Collection);
    banner.model.BannerElement = BannerElement = (function(_super) {

      __extends(BannerElement, _super);

      function BannerElement() {
        return BannerElement.__super__.constructor.apply(this, arguments);
      }

      return BannerElement;

    })(Backbone.NestedModel);
    banner.model.BannerElements = BannerElements = (function(_super) {

      __extends(BannerElements, _super);

      function BannerElements() {
        return BannerElements.__super__.constructor.apply(this, arguments);
      }

      BannerElements.prototype.model = BannerElement;

      BannerElements.prototype.comparator = function(element) {
        return parseInt(element.get('position'), 10);
      };

      return BannerElements;

    })(Backbone.Collection);
    StyleModel = (function(_super) {

      __extends(StyleModel, _super);

      function StyleModel() {
        return StyleModel.__super__.constructor.apply(this, arguments);
      }

      StyleModel.prototype.defaults = {
        css: '',
        html: '',
        vars: {}
      };

      StyleModel.prototype.default_vars = {};

      StyleModel.prototype.vars = function(override_vars) {
        var key, value, vars;
        vars = _.extend(this.default_vars, this.get('vars'));
        if ((override_vars != null) && _.isObject(override_vars)) {
          for (key in override_vars) {
            value = override_vars[key];
            vars[key.toUpperCase()] = value;
          }
        }
        for (key in vars) {
          value = vars[key];
          vars[key] = banner.replace(vars[key], vars);
        }
        return vars;
      };

      StyleModel.prototype.css = function(vars) {
        var css, x;
        css = this.get('css');
        if (css.length === 0) {
          return '';
        } else {
          return x = _.reduce(vars, function(memo, value, key) {
            return memo.replace(new RegExp(key, 'g'), value);
          }, css);
        }
      };

      return StyleModel;

    })(Backbone.Model);
    banner.model.BannerStyle = BannerStyle = (function(_super) {

      __extends(BannerStyle, _super);

      function BannerStyle() {
        return BannerStyle.__super__.constructor.apply(this, arguments);
      }

      BannerStyle.prototype.idAttribute = 'backbone_id';

      BannerStyle.prototype.default_vars = {
        'BACKGROUND_COLOR': '#ffffff',
        'TEXT_COLOR': '#000000'
      };

      BannerStyle.prototype.vars = function(banner) {
        return BannerStyle.__super__.vars.call(this, banner.get('style'));
      };

      BannerStyle.prototype.css = function(banner, prefix) {
        return BannerStyle.__super__.css.call(this, _.extend({
          'CSS_PREFIX': prefix
        }, this.vars(banner)));
      };

      return BannerStyle;

    })(StyleModel);
    banner.model.TimerStyle = TimerStyle = (function(_super) {

      __extends(TimerStyle, _super);

      function TimerStyle() {
        return TimerStyle.__super__.constructor.apply(this, arguments);
      }

      TimerStyle.prototype.vars = function(banner, bannerStyle) {
        var key, value, vars, _ref1;
        vars = {};
        _ref1 = bannerStyle != null ? bannerStyle.vars(banner) : void 0;
        for (key in _ref1) {
          value = _ref1[key];
          vars["BANNER_" + key] = value;
        }
        return TimerStyle.__super__.vars.call(this, vars);
      };

      TimerStyle.prototype.css = function(banner, bannerStyle, prefix) {
        return TimerStyle.__super__.css.call(this, _.extend({
          'CSS_PREFIX': prefix
        }, this.vars(banner, bannerStyle)));
      };

      return TimerStyle;

    })(StyleModel);
    banner.model.BannerStyles = BannerStyles = (function(_super) {

      __extends(BannerStyles, _super);

      function BannerStyles() {
        return BannerStyles.__super__.constructor.apply(this, arguments);
      }

      BannerStyles.prototype.model = BannerStyle;

      BannerStyles.prototype.sync = function(method) {
        if (method === 'read') {
          return banner.ajax('ss_banner_styles_read', {
            context: this,
            success: function(response) {
              return this.add(response);
            }
          });
        }
      };

      return BannerStyles;

    })(Backbone.Collection);
    return banner.model.TimerStyles = TimerStyles = (function(_super) {

      __extends(TimerStyles, _super);

      function TimerStyles() {
        return TimerStyles.__super__.constructor.apply(this, arguments);
      }

      TimerStyles.prototype.model = TimerStyle;

      TimerStyles.prototype.sync = function(method) {
        if (method === 'read') {
          return banner.ajax('ss_banner_timer_styles_read', {
            context: this,
            success: function(response) {
              return this.add(response);
            }
          });
        }
      };

      return TimerStyles;

    })(Backbone.Collection);
  });

}).call(this);
