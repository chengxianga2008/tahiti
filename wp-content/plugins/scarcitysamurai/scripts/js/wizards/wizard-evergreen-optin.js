// Generated by CoffeeScript 1.6.3
/*

LEGAL COPYRIGHT NOTICE

Copyright (c) Noble Samurai Pty Ltd, 2008-2013. All Rights Reserved.

This software is proprietary to and embodies the confidential technology of Noble Samurai Pty Ltd.
Possession, use, dissemination or copying of this software and media is authorised only pursuant
to a valid written license from Noble Samurai Pty Ltd. Questions or requests regarding permission may
be sent by email to legal@noblesamurai.com or by post to PO Box 477, Blackburn Victoria 3130, Australia.
*/


(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  jQuery(function($) {
    var ScarcitySamuraiWizardEvergreenOptin;
    ScarcitySamuraiWizardEvergreenOptin = (function() {
      function ScarcitySamuraiWizardEvergreenOptin() {
        this.securityParams = {
          security_token: $('[name="security_token"]').val(),
          _wp_http_referer: $('[name="_wp_http_referer"]').val()
        };
        this.ajaxAction = scarcitySamuraiData.ajax_action;
        this.existingCampaigns = scarcitySamuraiData.campaigns;
        this.$wizardWrapper = $('.menu-edit');
        this.page = 0;
        this.campaignId = null;
        this.lastPage = 4;
        this.campaignCreated = false;
        this.$progressBar = $('.scarcity-samurai-wizard-progress-bar');
        this.$content = $('.scarcity-samurai-wizard-content');
        this.$contentPagesWrapper = $('.scarcity-samurai-wizard-content-pages-wrapper');
        this.$pageSelectTemplate = $('.ss-page-select-template');
        this.$backButton = $('.scarcity-samurai-wizard-buttons .back');
        this.$continueButton = $('.scarcity-samurai-wizard-buttons .continue');
        this.$finishButton = $('.scarcity-samurai-wizard-buttons .finish');
        this.$viewCampaignButton = $('.scarcity-samurai-wizard-buttons .view_campaign');
        this.$campaignName = $('[name="ss-wizard-evergreen-optin-campaign-name"]');
        this.$squeezePageId = $('[name="ss-wizard-evergreen-optin-squeeze-page-id"]');
        this.$autoResponderWrapper = $('.ss-auto-responder-wrapper');
        this.$autoResponder = $('.ss-auto-responder-select');
        this.$autoResponderNotSelectedMessage = $('.ss-auto-responder-not-selected-message');
        this.$offerPageId = $('[name="ss-wizard-evergreen-optin-offer-page-id"]');
        this.$days = $('[name="ss-wizard-evergreen-optin-days"]');
        this.$hours = $('[name="ss-wizard-evergreen-optin-hours"]');
        this.$minutes = $('[name="ss-wizard-evergreen-optin-minutes"]');
        this.$seconds = $('[name="ss-wizard-evergreen-optin-seconds"]');
        this.$tooLateAction = $('[name="ss-wizard-evergreen-optin-timer-expired"]');
        this.$tooLateActionRedirectPageId = $('[name="ss-wizard-evergreen-optin-timer-expired-redirect-page-id"]');
        this.$tooLateActionRedirectUrl = $('[name="ss-wizard-evergreen-optin-timer-expired-redirect-url"]');
        this.$bannerPosition = $('[name="ss-wizard-evergreen-optin-banner-position"]');
        this.$bannerId = $('[name="ss-wizard-evergreen-optin-banner-id"]');
        this.$bannerShowType = $('[name="ss-wizard-evergreen-optin-banner-show-type"]');
        this.$bannerShowValue = $('.ss-show-value-input');
        this.$bannerClickActionWrapper = $('.ss-wizard-evergreen-optin-banner-click-action-wrapper');
        this.$bannerAction = $('[name="ss-wizard-evergreen-optin-banner-action"]');
        this.$bannerActionRedirectPageId = $('[name="ss-wizard-evergreen-optin-banner-action-redirect-page-id"]');
        this.$bannerActionRedirectUrl = $('[name="ss-wizard-evergreen-optin-banner-action-redirect-url"]');
        this.$tokenSetupInstructions = $('.ss-wizard-evergreen-optin-token-setup-instructions');
        this.$unpublishedPagesWarning = $('.ss-wizard-evergreen-optin-unpublished-pages-warning');
        this.$publishAllButton = this.$unpublishedPagesWarning.find('.button');
        this.$unpublishedPagesList = this.$unpublishedPagesWarning.find('ul');
        this.$pageLinks = $('.ss-wizard-evergreen-optin-page-links');
        this.$squeezePageTitle = $('.ss-wizard-evergreen-optin-squeeze-page-title');
        this.$squeezePageEditLink = $('.ss-wizard-evergreen-optin-squeeze-page-edit-link');
        this.$squeezePageViewLink = $('.ss-wizard-evergreen-optin-squeeze-page-view-link');
        this.$squeezePageEmailURL = $('.ss-wizard-evergreen-optin-squeeze-page-email-url');
        this.$contentPages = $('.ss-wizard-evergreen-optin-content-pages');
        this.$offerPageTitle = $('.ss-wizard-evergreen-optin-offer-page-title');
        this.$offerPageEditLink = $('.ss-wizard-evergreen-optin-offer-page-edit-link');
        this.$offerPageViewLink = $('.ss-wizard-evergreen-optin-offer-page-view-link');
        this.$offerPageEmailURL = $('.ss-wizard-evergreen-optin-offer-page-email-url');
        this.bindSelect2($('.ss-page-select').not('.ss-page-select-template .ss-page-select'));
        this.$autoResponder.select2({
          placeholder: 'Please select...',
          width: '205px'
        });
        $('.ss-banner-select').select2({
          width: '300px'
        });
        this.createBindings();
        this.update();
        this.$wizardWrapper.show();
        this.$campaignName.focus();
      }

      ScarcitySamuraiWizardEvergreenOptin.prototype.createBindings = function() {
        var self,
          _this = this;
        self = this;
        this.$campaignName.keyup(function(event) {
          if (event.keyCode === 13) {
            return _this.$continueButton.click();
          }
        });
        this.$squeezePageId.change(function() {
          return ScarcitySamuraiHelper.ajax('ss_get_page_auto_responder', {
            page_id: parseInt(this.value)
          }).then(function(response) {
            if (response.data.auto_responder != null) {
              self.$autoResponder.select2('val', response.data.auto_responder);
              self.$autoResponderNotSelectedMessage.slideUp();
            } else {
              self.$autoResponder.select2('val', '');
              self.$autoResponderNotSelectedMessage.slideDown();
            }
            return self.$autoResponderWrapper.slideDown();
          });
        });
        this.$autoResponder.change(function() {
          return _this.$autoResponderNotSelectedMessage.slideUp();
        });
        this.$offerPageId.change(function() {
          return ScarcitySamuraiHelper.loadPageToEditor({
            page_id: parseInt(this.value),
            security_params: self.securityParams
          });
        });
        this.$contentPagesWrapper.on('change', '.ss-page-select', function() {
          var $clone, $selectWrapper;
          $selectWrapper = $(this).parents('.ss-page-select-wrapper');
          if (!$selectWrapper.is(':last-child')) {
            return;
          }
          $clone = self.$pageSelectTemplate.clone().removeClass('ss-page-select-template ss-hidden').addClass('ss-page-select-wrapper');
          self.bindSelect2($clone.find('.ss-page-select'));
          $selectWrapper.after($clone);
          return $selectWrapper.find('.ss-wizard-evergreen-optin-remove-content-page').show();
        });
        this.$contentPagesWrapper.on('click', '.ss-wizard-evergreen-optin-remove-content-page', function() {
          $(this).parent().remove();
          return false;
        });
        $.each([this.$tooLateAction, this.$bannerAction], function(index, $el) {
          return $el.change(function() {
            if (!this.checked) {
              return;
            }
            $(this).closest('ul').find('.ss-opts').hide();
            return $(this).closest('li').find('.ss-opts').show().find('input').eq(0).focus();
          }).change();
        });
        this.$bannerPosition.change(function() {
          if (!this.checked) {
            return;
          }
          $(".ss-banner-pos-opts:not(." + this.value + ")").hide();
          return $(".ss-banner-pos-opts." + this.value).show();
        }).change();
        this.$bannerId.change(function() {
          return self.$bannerClickActionWrapper.toggle(this.value !== '');
        });
        this.$bannerShowValue.click(function() {
          return $(this).siblings('[type="radio"]').click();
        });
        this.$progressBar.find('li').click(function() {
          if ($(this).is('.done') && !self.campaignCreated) {
            self.page = $(this).index();
            return self.update();
          }
        });
        this.$backButton.click(function() {
          _this.page -= 1;
          return _this.update();
        });
        this.$continueButton.click(function() {
          if (!_this.validate()) {
            return;
          }
          _this.page += 1;
          return _this.update();
        });
        this.$finishButton.click(function() {
          if (!_this.validate()) {
            return;
          }
          return _this.createCampaign();
        });
        this.$viewCampaignButton.click(function() {
          return window.location = "?page=scarcitysamurai/campaigns&action=edit&id=" + _this.campaignId;
        });
        this.$publishAllButton.click(function() {
          return _this.publishAll();
        });
      };

      ScarcitySamuraiWizardEvergreenOptin.prototype.update = function() {
        this.updateProgressBar();
        this.updateContent();
        this.updateButtons();
        if (this.page === this.lastPage) {
          return this.bindCopyToClipboardButtons();
        }
      };

      ScarcitySamuraiWizardEvergreenOptin.prototype.updateProgressBar = function() {
        var _this = this;
        return this.$progressBar.find('li').each(function(index, menuItem) {
          if (index < _this.page) {
            return $(menuItem).removeClass('current').addClass('done');
          } else if (index === _this.page) {
            return $(menuItem).removeClass('done').addClass('current');
          } else {
            return $(menuItem).removeClass('done current');
          }
        });
      };

      ScarcitySamuraiWizardEvergreenOptin.prototype.updateContent = function() {
        var _this = this;
        return this.$content.find('> div').each(function(index, contentPage) {
          if (index === _this.page) {
            $(contentPage).show();
            _this.$validationErrorsWrapper = $(contentPage).find('.ss-wizard-validation-errors');
            return _this.$validationErrors = _this.$validationErrorsWrapper.find('ul');
          } else {
            return $(contentPage).hide();
          }
        });
      };

      ScarcitySamuraiWizardEvergreenOptin.prototype.updateButtons = function() {
        this.$backButton.toggle(this.page > 0 && this.page < this.lastPage);
        this.$continueButton.toggle(this.page < this.lastPage - 1);
        this.$finishButton.toggle(this.page === this.lastPage - 1);
        return this.$viewCampaignButton.toggle(this.page === this.lastPage);
      };

      ScarcitySamuraiWizardEvergreenOptin.prototype.getContentPageIds = function() {
        var $contentPageSelects, contentPageIds;
        $contentPageSelects = $('[name="ss-wizard-evergreen-optin-content-page-id"]').not('.ss-page-select-template [name="ss-wizard-evergreen-optin-content-page-id"]');
        contentPageIds = $.map($.makeArray($contentPageSelects), function(contentPageSelect) {
          return parseInt($(contentPageSelect).val(), 10);
        });
        contentPageIds.pop();
        return contentPageIds;
      };

      ScarcitySamuraiWizardEvergreenOptin.prototype.validate = function() {
        var bannerId, error, pageId, redirectUrl, showValue, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4;
        this.errors = [];
        switch (this.page) {
          case 0:
            this.campaignName = $.trim(this.$campaignName.val());
            if (this.campaignName === '') {
              this.errors.push('Campaign name cannot be blank.');
            } else if (_ref = this.campaignName, __indexOf.call(this.existingCampaigns, _ref) >= 0) {
              this.errors.push('Campaign name already exists.');
            }
            break;
          case 1:
            this.squeezePageId = this.$squeezePageId.val();
            this.squeezePageId = this.squeezePageId === '' ? null : parseInt(this.squeezePageId, 10);
            if (this.squeezePageId === null) {
              this.errors.push('Squeeze page must be selected.');
            } else {
              this.autoResponder = this.$autoResponder.val();
              if (this.autoResponder === '') {
                this.errors.push('Auto responder must be selected.');
              }
            }
            this.contentPageIds = this.getContentPageIds();
            if (this.squeezePageId !== null && (_ref1 = this.squeezePageId, __indexOf.call(this.contentPageIds, _ref1) >= 0)) {
              this.errors.push('Content pages must be different from the squeeze page.');
            }
            if (this.contentPageIds.length !== _.uniq(this.contentPageIds).length) {
              this.errors.push('Content pages must be different.');
            }
            this.offerPageId = this.$offerPageId.val();
            this.offerPageId = this.offerPageId === '' ? null : parseInt(this.offerPageId, 10);
            if (this.offerPageId === null) {
              this.errors.push('Offer page must be selected.');
            } else {
              if (this.squeezePageId !== null && this.squeezePageId === this.offerPageId) {
                this.errors.push('Offer page must be different from the squeeze page.');
              }
              if (_ref2 = this.offerPageId, __indexOf.call(this.contentPageIds, _ref2) >= 0) {
                this.errors.push('Content pages must be different from the offer page.');
              }
            }
            break;
          case 2:
            this.days = $.trim(this.$days.val());
            if (this.days === '' || ScarcitySamuraiHelper.isNumber(this.days)) {
              this.days = +this.days;
            } else {
              this.errors.push('Days must be a valid number.');
            }
            this.hours = $.trim(this.$hours.val());
            if (this.hours === '' || ScarcitySamuraiHelper.isNumber(this.hours)) {
              this.hours = +this.hours;
            } else {
              this.errors.push('Hours must be a valid number.');
            }
            this.minutes = $.trim(this.$minutes.val());
            if (this.minutes === '' || ScarcitySamuraiHelper.isNumber(this.minutes)) {
              this.minutes = +this.minutes;
            } else {
              this.errors.push('Minutes must be a valid number.');
            }
            this.seconds = $.trim(this.$seconds.val());
            if (this.seconds === '' || ScarcitySamuraiHelper.isNumber(this.seconds)) {
              this.seconds = +this.seconds;
            } else {
              this.errors.push('Seconds must be a valid number.');
            }
            if ((this.errors.length === 0) && (this.days + this.hours + this.minutes + this.seconds === 0)) {
              this.errors.push('Time period cannot be 0.');
            }
            this.tooLateAction = {
              action: this.$tooLateAction.filter(':checked').val()
            };
            switch (this.tooLateAction.action) {
              case 'redirect_to_page':
                pageId = this.$tooLateActionRedirectPageId.val();
                pageId = pageId === '' ? null : parseInt(pageId, 10);
                if (pageId === null) {
                  this.errors.push('Redirect page must be selected.');
                }
                this.tooLateAction.page_id = pageId;
                break;
              case 'redirect_to_url':
                redirectUrl = $.trim(this.$tooLateActionRedirectUrl.val());
                if (redirectUrl === '') {
                  this.errors.push('Redirect URL must be specified.');
                } else if (!ScarcitySamuraiHelper.isValidURL(redirectUrl)) {
                  this.errors.push("Redirect URL is invalid.");
                }
                this.tooLateAction.url = redirectUrl;
            }
            break;
          case 3:
            this.banner = {
              position: this.$bannerPosition.filter(':checked').val()
            };
            if ((_ref3 = this.banner.position) !== 'header' && _ref3 !== 'footer') {
              break;
            }
            bannerId = this.$bannerId.val();
            this.banner.banner_id = bannerId === '' ? null : parseInt(bannerId, 10);
            if (this.banner.banner_id === null) {
              this.errors.push('Banner must be selected.');
            }
            this.banner.show = {
              type: this.$bannerShowType.filter(':checked').val()
            };
            if (this.banner.show.type === 'page_load') {
              showValue = $.trim(this.$bannerShowValue.val());
              if (ScarcitySamuraiHelper.isNumber(showValue)) {
                this.banner.show.value = parseInt(showValue, 10);
              } else {
                this.errors.push("Banner's reveal time must be a valid number.");
              }
            }
            this.banner.click_action = {
              action: this.$bannerAction.filter(':checked').val()
            };
            switch (this.banner.click_action.action) {
              case 'redirect_to_page':
                pageId = this.$bannerActionRedirectPageId.val();
                pageId = pageId === '' ? null : parseInt(pageId, 10);
                if (pageId === null) {
                  this.errors.push("Banner's redirect page must be selected.");
                }
                this.banner.click_action.page_id = pageId;
                break;
              case 'redirect_to_url':
                redirectUrl = $.trim(this.$bannerActionRedirectUrl.val());
                if (redirectUrl === '') {
                  this.errors.push("Banner's redirect URL must be specified.");
                } else if (!ScarcitySamuraiHelper.isValidURL(redirectUrl)) {
                  this.errors.push("Banner's redirect URL is invalid.");
                }
                this.banner.click_action.url = redirectUrl;
            }
        }
        if (this.errors.length === 0) {
          this.$validationErrorsWrapper.hide();
          return true;
        }
        this.$validationErrors.empty();
        _ref4 = this.errors;
        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
          error = _ref4[_i];
          this.$validationErrors.append("<li>" + error + "</li>");
        }
        this.$validationErrorsWrapper.show();
        return false;
      };

      ScarcitySamuraiWizardEvergreenOptin.prototype.createCampaign = function() {
        var data, params,
          _this = this;
        params = {
          campaign_name: this.campaignName,
          squeeze_page_id: this.squeezePageId,
          auto_responder: this.autoResponder,
          content_page_ids: this.contentPageIds,
          offer_page_id: this.offerPageId,
          page_expiry: {
            value: 86400 * this.days + 3600 * this.hours + 60 * this.minutes + this.seconds,
            too_late_action: this.tooLateAction
          },
          banner: this.banner
        };
        if (this.banner.position === 'content') {
          params.content = ScarcitySamuraiHelper.getEditorContent();
        }
        data = {
          action: this.ajaxAction,
          data: JSON.stringify(params)
        };
        data = _.extend(data, this.securityParams);
        return $.ajax({
          type: "POST",
          url: ajaxurl,
          data: data,
          dataType: 'json'
        }).done(function(result) {
          if (result.success) {
            return _this.showLastPage(result.data);
          } else {
            return ScarcitySamuraiHelper.error(result.data);
          }
        });
      };

      ScarcitySamuraiWizardEvergreenOptin.prototype.showLastPage = function(result) {
        var $li, $ul, i, pages, unpublishedPage, unpublishedPages, _i, _j, _len, _ref;
        this.result = result;
        this.campaignCreated = true;
        this.campaignId = result.campaign_id;
        this.$progressBar.find('li').css('cursor', 'auto');
        pages = _.union(result.squeeze_page, result.content_pages, result.offer_page);
        unpublishedPages = _.filter(pages, function(page) {
          return !page.published;
        });
        if (unpublishedPages.length > 0) {
          for (_i = 0, _len = unpublishedPages.length; _i < _len; _i++) {
            unpublishedPage = unpublishedPages[_i];
            this.$unpublishedPagesList.append("<li><a href='" + unpublishedPage.edit_url + "'>" + unpublishedPage.title + "</a></li>");
          }
          if (unpublishedPages.length === 1) {
            this.$unpublishedPagesWarning.find('.single').show();
          } else {
            this.$unpublishedPagesWarning.find('.multiple').show();
          }
          this.$unpublishedPagesWarning.show();
        }
        this.$tokenSetupInstructions.find('.auto_responder_short_name').text(result.auto_responder_short_name);
        this.$tokenSetupInstructions.find(".instructions-link." + result.auto_responder).show();
        this.$tokenSetupInstructions.show();
        this.$squeezePageTitle.closest('li').addClass("ss-page-" + result.squeeze_page.id).toggleClass('ss-page-status-publish', result.squeeze_page.published);
        this.$squeezePageTitle.text(result.squeeze_page.title);
        this.$squeezePageEditLink.attr('href', result.squeeze_page.edit_url);
        this.$squeezePageViewLink.attr('href', result.squeeze_page.view_url);
        this.$squeezePageEmailURL.val(result.squeeze_page.email_url);
        if (result.content_pages.length === 0) {
          this.$contentPages.hide();
        } else {
          $ul = this.$contentPages.find('ul');
          $li = $ul.find('li').eq(0);
          $ul.empty();
          for (i = _j = 0, _ref = result.content_pages.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
            $ul.append($li.clone());
          }
          $ul.find('li').each(function(index) {
            var contentPage;
            contentPage = result.content_pages[index];
            $(this).addClass("ss-page-" + contentPage.id).toggleClass('ss-page-status-publish', contentPage.published);
            $(this).find('.ss-wizard-evergreen-optin-content-page-title').text(contentPage.title);
            $(this).find('.ss-wizard-evergreen-optin-content-page-edit-link').attr('href', contentPage.edit_url);
            $(this).find('.ss-wizard-evergreen-optin-content-page-view-link').attr('href', contentPage.view_url);
            return $(this).find('.ss-wizard-evergreen-optin-content-page-email-url').val(contentPage.email_url);
          });
        }
        this.$offerPageTitle.closest('li').addClass("ss-page-" + result.offer_page.id).toggleClass('ss-page-status-publish', result.offer_page.published);
        this.$offerPageTitle.text(result.offer_page.title);
        this.$offerPageEditLink.attr('href', result.offer_page.edit_url);
        this.$offerPageViewLink.attr('href', result.offer_page.view_url);
        this.$offerPageEmailURL.val(result.offer_page.email_url);
        this.$pageLinks.show();
        this.page += 1;
        return this.update();
      };

      ScarcitySamuraiWizardEvergreenOptin.prototype.bindCopyToClipboardButtons = function() {
        var _this = this;
        return $('.ss-wizard-evergreen-optin-copy-to-clipboard-button').each(function(index, copyToClipboardButton) {
          var $copyToClipboardButton, $copyToClipboardConfirmation;
          $copyToClipboardButton = $(copyToClipboardButton);
          $copyToClipboardConfirmation = $copyToClipboardButton.siblings('.ss-copy-to-clipboard-confirmation-message');
          $copyToClipboardButton.zclip('remove');
          if ($copyToClipboardButton.closest('.ss-page-status-publish').length === 0) {
            return;
          }
          return $copyToClipboardButton.zclip({
            path: '../wp-content/plugins/scarcitysamurai/vendor/zclip/ZeroClipboard.swf',
            zIndex: 1100,
            copy: function() {
              return $copyToClipboardButton.siblings('input').val();
            },
            afterCopy: function() {
              $copyToClipboardConfirmation.show();
              setTimeout(function() {
                return $copyToClipboardConfirmation.fadeOut(1000);
              }, 5000);
            }
          });
        });
      };

      ScarcitySamuraiWizardEvergreenOptin.prototype.bindSelect2 = function($elements) {
        return $elements.select2({
          placeholder: 'Select a page...',
          width: '300px'
        });
      };

      ScarcitySamuraiWizardEvergreenOptin.prototype.publishAll = function() {
        var data, publishAllRequest,
          _this = this;
        data = {
          action: 'ss_publish_pages',
          data: JSON.stringify({
            campaign_id: this.campaignId
          })
        };
        data = _.extend(data, this.securityParams);
        publishAllRequest = $.ajax({
          type: "POST",
          url: ajaxurl,
          data: data,
          dataType: 'json'
        });
        return publishAllRequest.done(function(result) {
          var emailUrl, pageId, _ref;
          if (result.success) {
            _this.$unpublishedPagesWarning.hide();
            _ref = result.data.email_urls;
            for (pageId in _ref) {
              emailUrl = _ref[pageId];
              $(".ss-page-" + pageId).addClass('ss-page-status-publish').find('.ss-page-url').val(emailUrl);
            }
            return _this.bindCopyToClipboardButtons();
          } else {
            return ScarcitySamuraiHelper.error(result.data);
          }
        });
      };

      return ScarcitySamuraiWizardEvergreenOptin;

    })();
    return new ScarcitySamuraiWizardEvergreenOptin();
  });

}).call(this);
